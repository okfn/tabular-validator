(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{141:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return b})),r.d(t,"metadata",(function(){return o})),r.d(t,"toc",(function(){return a})),r.d(t,"default",(function(){return u}));var l=r(3),c=r(8),n=(r(0),r(159)),b={title:"Formats Reference"},o={unversionedId:"references/formats-reference",id:"references/formats-reference",isDocsHomePage:!1,title:"Formats Reference",description:"It's a formats reference supported by the main Frictionless package. If you have installed external plugins, there can be more formats available. Below we're listing a format group name (or a parser name) like Excel, which is used, for example, for xlsx, xls etc formats. Options can be used for creating dialects, for example, dialect = ExcelDialect(sheet=1).",source:"@site/../docs/references/formats-reference.md",slug:"/references/formats-reference",permalink:"/docs/references/formats-reference",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/master/docs/../docs/references/formats-reference.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1615664484,formattedLastUpdatedAt:"3/13/2021",sidebar:"references",previous:{title:"Schemes Reference",permalink:"/docs/references/schemes-reference"},next:{title:"Errors Reference",permalink:"/docs/references/errors-reference"}},a=[{value:"Bigquery",id:"bigquery",children:[{value:"Project",id:"project",children:[]},{value:"Dataset",id:"dataset",children:[]},{value:"Table",id:"table",children:[]}]},{value:"Ckan",id:"ckan",children:[{value:"Resource",id:"resource",children:[]},{value:"Dataset",id:"dataset-1",children:[]},{value:"Apikey",id:"apikey",children:[]}]},{value:"Csv",id:"csv",children:[{value:"Delimiter",id:"delimiter",children:[]},{value:"Line Terminator",id:"line-terminator",children:[]},{value:"Quote Char",id:"quote-char",children:[]},{value:"Double Quote",id:"double-quote",children:[]},{value:"Escape Char",id:"escape-char",children:[]},{value:"Null Sequence",id:"null-sequence",children:[]},{value:"Skip Initial Space",id:"skip-initial-space",children:[]},{value:"Comment Char",id:"comment-char",children:[]}]},{value:"Excel",id:"excel",children:[{value:"Sheet",id:"sheet",children:[]},{value:"Workbook Cache",id:"workbook-cache",children:[]},{value:"Fill Merged Cells",id:"fill-merged-cells",children:[]},{value:"Preserve Formatting",id:"preserve-formatting",children:[]},{value:"Adjust Floating Point Error",id:"adjust-floating-point-error",children:[]}]},{value:"Gsheets",id:"gsheets",children:[]},{value:"Html",id:"html",children:[{value:"Selector",id:"selector",children:[]}]},{value:"Inline",id:"inline",children:[{value:"Keys",id:"keys",children:[]},{value:"Keyed",id:"keyed",children:[]}]},{value:"Inline",id:"inline-1",children:[{value:"Keys",id:"keys-1",children:[]},{value:"Keyed",id:"keyed-1",children:[]}]},{value:"Json",id:"json",children:[{value:"Keys",id:"keys-2",children:[]},{value:"Keyed",id:"keyed-2",children:[]},{value:"Property",id:"property",children:[]}]},{value:"Ods",id:"ods",children:[{value:"Sheet",id:"sheet-1",children:[]}]},{value:"Pandas",id:"pandas",children:[]},{value:"Spss",id:"spss",children:[]},{value:"Sql",id:"sql",children:[{value:"Table",id:"table-1",children:[]},{value:"Order By",id:"order-by",children:[]}]}],i={toc:a};function u(e){var t=e.components,r=Object(c.a)(e,["components"]);return Object(n.b)("wrapper",Object(l.a)({},i,r,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"It's a formats reference supported by the main Frictionless package. If you have installed external plugins, there can be more formats available. Below we're listing a format group name (or a parser name) like Excel, which is used, for example, for ",Object(n.b)("inlineCode",{parentName:"p"},"xlsx"),", ",Object(n.b)("inlineCode",{parentName:"p"},"xls")," etc formats. Options can be used for creating dialects, for example, ",Object(n.b)("inlineCode",{parentName:"p"},"dialect = ExcelDialect(sheet=1)"),"."),Object(n.b)("h2",{id:"bigquery"},"Bigquery"),Object(n.b)("h3",{id:"project"},"Project"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Project"),Object(n.b)("h3",{id:"dataset"},"Dataset"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Dataset"),Object(n.b)("h3",{id:"table"},"Table"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Table"),Object(n.b)("h2",{id:"ckan"},"Ckan"),Object(n.b)("h3",{id:"resource"},"Resource"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Resource"),Object(n.b)("h3",{id:"dataset-1"},"Dataset"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Dataset"),Object(n.b)("h3",{id:"apikey"},"Apikey"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Apikey"),Object(n.b)("h2",{id:"csv"},"Csv"),Object(n.b)("h3",{id:"delimiter"},"Delimiter"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Csv delimiter"),Object(n.b)("h3",{id:"line-terminator"},"Line Terminator"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Csv line terminator"),Object(n.b)("h3",{id:"quote-char"},"Quote Char"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Csv quote char"),Object(n.b)("h3",{id:"double-quote"},"Double Quote"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: bool")),Object(n.b)("p",null,"Csv double quote"),Object(n.b)("h3",{id:"escape-char"},"Escape Char"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Csv escape char"),Object(n.b)("h3",{id:"null-sequence"},"Null Sequence"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Csv null sequence"),Object(n.b)("h3",{id:"skip-initial-space"},"Skip Initial Space"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: bool")),Object(n.b)("p",null,"Csv skip initial space"),Object(n.b)("h3",{id:"comment-char"},"Comment Char"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Csv comment char"),Object(n.b)("h2",{id:"excel"},"Excel"),Object(n.b)("h3",{id:"sheet"},"Sheet"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: int|str")),Object(n.b)("p",null,"Number from 1 or name of an excel sheet"),Object(n.b)("h3",{id:"workbook-cache"},"Workbook Cache"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: dict")),Object(n.b)("p",null,"Workbook cache"),Object(n.b)("h3",{id:"fill-merged-cells"},"Fill Merged Cells"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: bool")),Object(n.b)("p",null,"Whether to fill merged cells"),Object(n.b)("h3",{id:"preserve-formatting"},"Preserve Formatting"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: bool")),Object(n.b)("p",null,"Whither to preserve formatting"),Object(n.b)("h3",{id:"adjust-floating-point-error"},"Adjust Floating Point Error"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: bool")),Object(n.b)("p",null,"Whether to adjust floating point error"),Object(n.b)("h2",{id:"gsheets"},"Gsheets"),Object(n.b)("p",null,"There are no options available."),Object(n.b)("h2",{id:"html"},"Html"),Object(n.b)("h3",{id:"selector"},"Selector"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Html selector"),Object(n.b)("h2",{id:"inline"},"Inline"),Object(n.b)("h3",{id:"keys"},"Keys"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str[]")),Object(n.b)("p",null,"A list of strings to use as data keys"),Object(n.b)("h3",{id:"keyed"},"Keyed"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: bool")),Object(n.b)("p",null,"Whether data rows are keyed"),Object(n.b)("h2",{id:"inline-1"},"Inline"),Object(n.b)("h3",{id:"keys-1"},"Keys"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str[]")),Object(n.b)("p",null,"A list of strings to use as data keys"),Object(n.b)("h3",{id:"keyed-1"},"Keyed"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: bool")),Object(n.b)("p",null,"Whether data rows are keyed"),Object(n.b)("h2",{id:"json"},"Json"),Object(n.b)("h3",{id:"keys-2"},"Keys"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str[]")),Object(n.b)("p",null,"A list of strings to use as data keys"),Object(n.b)("h3",{id:"keyed-2"},"Keyed"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: bool")),Object(n.b)("p",null,"Whether data rows are keyed"),Object(n.b)("h3",{id:"property"},"Property"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"A path within json to the data"),Object(n.b)("h2",{id:"ods"},"Ods"),Object(n.b)("h3",{id:"sheet-1"},"Sheet"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Sheet"),Object(n.b)("h2",{id:"pandas"},"Pandas"),Object(n.b)("p",null,"There are no options available."),Object(n.b)("h2",{id:"spss"},"Spss"),Object(n.b)("p",null,"There are no options available."),Object(n.b)("h2",{id:"sql"},"Sql"),Object(n.b)("h3",{id:"table-1"},"Table"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Table"),Object(n.b)("h3",{id:"order-by"},"Order By"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Type: str")),Object(n.b)("p",null,"Order_by"))}u.isMDXComponent=!0},159:function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return O}));var l=r(0),c=r.n(l);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function b(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,l)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?b(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):b(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,l,c=function(e,t){if(null==e)return{};var r,l,c={},n=Object.keys(e);for(l=0;l<n.length;l++)r=n[l],t.indexOf(r)>=0||(c[r]=e[r]);return c}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)r=n[l],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(c[r]=e[r])}return c}var i=c.a.createContext({}),u=function(e){var t=c.a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=u(e.components);return c.a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},d=c.a.forwardRef((function(e,t){var r=e.components,l=e.mdxType,n=e.originalType,b=e.parentName,i=a(e,["components","mdxType","originalType","parentName"]),s=u(r),d=l,O=s["".concat(b,".").concat(d)]||s[d]||p[d]||n;return r?c.a.createElement(O,o(o({ref:t},i),{},{components:r})):c.a.createElement(O,o({ref:t},i))}));function O(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=r.length,b=new Array(n);b[0]=d;var o={};for(var a in t)hasOwnProperty.call(t,a)&&(o[a]=t[a]);o.originalType=e,o.mdxType="string"==typeof e?e:l,b[1]=o;for(var i=2;i<n;i++)b[i]=r[i];return c.a.createElement.apply(null,b)}return c.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);