(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{159:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=b(n),u=a,m=d["".concat(i,".").concat(u)]||d[u]||p[u]||o;return n?r.a.createElement(m,l(l({ref:t},s),{},{components:n})):r.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(8),o=(n(0),n(159)),i={title:"Contributing"},l={unversionedId:"development/contributing",id:"development/contributing",isDocsHomePage:!1,title:"Contributing",description:"General Guideline",source:"@site/../docs/development/contributing.md",slug:"/development/contributing",permalink:"/docs/development/contributing",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/master/docs/../docs/development/contributing.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1615664069,formattedLastUpdatedAt:"3/13/2021",sidebar:"development",previous:{title:"Authors",permalink:"/docs/development/authors"},next:{title:"What's next?",permalink:"/docs/development/whats-next"}},c=[{value:"General Guideline",id:"general-guideline",children:[]},{value:"Docs Contribution",id:"docs-contribution",children:[]},{value:"Code Contribution",id:"code-contribution",children:[]},{value:"Release Process",id:"release-process",children:[]}],s={toc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"general-guideline"},"General Guideline"),Object(o.b)("p",null,"We use Github as a code and issues hosting platform. To report a bug or propose a new feature, please open an issue. For pull requests, we would ask you initially create an issue and then create a pull requests linked to this issue."),Object(o.b)("h2",{id:"docs-contribution"},"Docs Contribution"),Object(o.b)("p",null,"To contribute to the documentation, please find an article in the ",Object(o.b)("inlineCode",{parentName:"p"},"docs")," folder and update its contents. Here is a list of hand-written sections:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"docs/guides")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"docs/tutorials"))),Object(o.b)("p",null,"Some documentation is generated (for more information see ",Object(o.b)("inlineCode",{parentName:"p"},"docs/build.py"),"). Here is a list of generated sections (excluding ",Object(o.b)("inlineCode",{parentName:"p"},"overview/whats-next")," docs):"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"docs/references")," (from the codebase's docstrings)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"docs/development")," (from the repository root's docs)")),Object(o.b)("p",null,"You can test this documentation using ",Object(o.b)("a",{parentName:"p",href:"https://github.com/roll/goodread-py"},"Goodread"),". Goodread executes Python and Bash codeblocks in Markdown and writes the results back. Here is a quick example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"goodread docs/guides/basic-examples.md --diff # get the diff\ngoodread docs/guides/basic-examples.md --print # print the doc\ngoodread docs/guides/basic-examples.md # update inline\n")),Object(o.b)("p",null,"It's possible to run this documentation portal locally but it requires Node.js 12+ installed on your comupter:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"cd portal\nnpm install\nnpm start\n")),Object(o.b)("p",null,"To update a reference in ",Object(o.b)("inlineCode",{parentName:"p"},"docs/references")," and some other generated documents please update codebaes docstrings or root documents. For more information about generated documentation see ",Object(o.b)("inlineCode",{parentName:"p"},"docs/build.py"),"."),Object(o.b)("h2",{id:"code-contribution"},"Code Contribution"),Object(o.b)("p",null,"Frictionless is a Python3.6+ framework, and it uses some basically standard Python tools for the development process:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"testing: ",Object(o.b)("inlineCode",{parentName:"li"},"pytest")),Object(o.b)("li",{parentName:"ul"},"linting: ",Object(o.b)("inlineCode",{parentName:"li"},"pylama")),Object(o.b)("li",{parentName:"ul"},"formatting: ",Object(o.b)("inlineCode",{parentName:"li"},"black")),Object(o.b)("li",{parentName:"ul"},"type checking: ",Object(o.b)("inlineCode",{parentName:"li"},"mypy")," (under construction)")),Object(o.b)("p",null,"It's a commonplace but, of course, you need ",Object(o.b)("inlineCode",{parentName:"p"},"git")," to work on the project, also ",Object(o.b)("inlineCode",{parentName:"p"},"make")," is recommended. After cloning the repository, it's recommended to create a virtual environment and install the dependencies:"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"it will install a ",Object(o.b)("inlineCode",{parentName:"p"},"git commit")," hook running the tests")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},'python3.8 -m venv .python\nsource .python/bin/activate\npip install wheel\nmake install\nalias "frictionless=python -m frictionless"\n')),Object(o.b)("p",null,"Then you can run various make commands:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"make docs")," - build the docs"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"make format")," - format source code"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"make install")," - install the dependencies (we did before)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"make lint")," - lint the project"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"make release")," - release a new version"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"make test")," - run the tests"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"make test-ci")," - run the tests (including integration)")),Object(o.b)("p",null,"Of course, it's possible and recommended to run underlying commands like ",Object(o.b)("inlineCode",{parentName:"p"},"pytest")," or ",Object(o.b)("inlineCode",{parentName:"p"},"pylama")," to speed up the development process."),Object(o.b)("h2",{id:"release-process"},"Release Process"),Object(o.b)("p",null,"To release a new version:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"check that you have push access to the ",Object(o.b)("inlineCode",{parentName:"li"},"master")," branch"),Object(o.b)("li",{parentName:"ul"},"update ",Object(o.b)("inlineCode",{parentName:"li"},"frictionless/assets/VERSION")," following the SemVer standard"),Object(o.b)("li",{parentName:"ul"},"add changes to ",Object(o.b)("inlineCode",{parentName:"li"},"CHANGELOG.md")," if it's not a patch release (major or micro)"),Object(o.b)("li",{parentName:"ul"},"run ",Object(o.b)("inlineCode",{parentName:"li"},"make release")," which create a release commit and tag and push it to Github"),Object(o.b)("li",{parentName:"ul"},"an actual release will happen on the Travis CI platform after running the tests")))}b.isMDXComponent=!0}}]);