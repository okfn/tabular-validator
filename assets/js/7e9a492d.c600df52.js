(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{116:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return c}));var a=t(3),r=t(8),o=(t(0),t(159)),s={title:"Transform Steps"},p={unversionedId:"guides/transform-steps",id:"guides/transform-steps",isDocsHomePage:!1,title:"Transform Steps",description:"This guide assumes basic familiarity with the Frictionless Framework. To learn more, please read the Introduction and Quick Start.",source:"@site/../docs/guides/transform-steps.md",slug:"/guides/transform-steps",permalink:"/docs/guides/transform-steps",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/master/docs/../docs/guides/transform-steps.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1615364042,formattedLastUpdatedAt:"3/10/2021",sidebar:"guides",previous:{title:"Transform Guide",permalink:"/docs/guides/transform-guide"},next:{title:"Package Guide",permalink:"/docs/guides/framework/package-guide"}},i=[{value:"Resource Steps",id:"resource-steps",children:[{value:"Add Resource",id:"add-resource",children:[]},{value:"Remove Resource",id:"remove-resource",children:[]},{value:"Transform Resource",id:"transform-resource",children:[]},{value:"Update Resource",id:"update-resource",children:[]}]},{value:"Table Steps",id:"table-steps",children:[{value:"Aggregate Table",id:"aggregate-table",children:[]},{value:"Attach Tables",id:"attach-tables",children:[]},{value:"Debug Table",id:"debug-table",children:[]},{value:"Diff Tables",id:"diff-tables",children:[]},{value:"Intersect Tables",id:"intersect-tables",children:[]},{value:"Join Tables",id:"join-tables",children:[]},{value:"Melt Table",id:"melt-table",children:[]},{value:"Merge Tables",id:"merge-tables",children:[]},{value:"Pivot Table",id:"pivot-table",children:[]},{value:"Print Table",id:"print-table",children:[]},{value:"Recast Table",id:"recast-table",children:[]},{value:"Transpose Table",id:"transpose-table",children:[]},{value:"Validate Table",id:"validate-table",children:[]},{value:"Write Table",id:"write-table",children:[]}]},{value:"Field Steps",id:"field-steps",children:[{value:"Add Field",id:"add-field",children:[]},{value:"Filter Fields",id:"filter-fields",children:[]},{value:"Move Field",id:"move-field",children:[]},{value:"Remove Field",id:"remove-field",children:[]},{value:"Split Field",id:"split-field",children:[]},{value:"Unpack Field",id:"unpack-field",children:[]},{value:"Update Field",id:"update-field",children:[]}]},{value:"Row Steps",id:"row-steps",children:[{value:"Filter Rows",id:"filter-rows",children:[]},{value:"Search Rows",id:"search-rows",children:[]},{value:"Slice Rows",id:"slice-rows",children:[]},{value:"Sort Rows",id:"sort-rows",children:[]},{value:"Split Rows",id:"split-rows",children:[]},{value:"Subset Rows",id:"subset-rows",children:[]},{value:"Ungroup Rows",id:"ungroup-rows",children:[]}]},{value:"Cell Steps",id:"cell-steps",children:[{value:"Convert Cells",id:"convert-cells",children:[]},{value:"Fill Cells",id:"fill-cells",children:[]},{value:"Format Cells",id:"format-cells",children:[]},{value:"Interpolate Cells",id:"interpolate-cells",children:[]},{value:"Replace Cells",id:"replace-cells",children:[]},{value:"Set Cells",id:"set-cells",children:[]}]}],l={toc:i};function c(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This guide assumes basic familiarity with the Frictionless Framework. To learn more, please read the ",Object(o.b)("a",{parentName:"p",href:"https://framework.frictionlessdata.io/docs/guides/introduction"},"Introduction")," and ",Object(o.b)("a",{parentName:"p",href:"https://framework.frictionlessdata.io/docs/guides/quick-start"},"Quick Start"),".")),Object(o.b)("p",null,"Frictionless includes more than 40+ built-in transform steps. They are grouped by the object so you can find them easily if you have code auto completion. Start typing, for example, ",Object(o.b)("inlineCode",{parentName:"p"},"steps.table...")," and you will see all the available steps. The groups are listed below and you will find every group described in more detail in the next sections. It's also possible to write custom transform steps. Please read the section below to learn more about it.  Let's prepare the data that we need to show how the checks below work:"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Download ",Object(o.b)("a",{parentName:"p",href:"https://raw.githubusercontent.com/frictionlessdata/frictionless-py/master/data/transform.csv"},Object(o.b)("inlineCode",{parentName:"a"},"transform.csv"))," into the ",Object(o.b)("inlineCode",{parentName:"p"},"data")," folder to reproduce the examples.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"cat data/transform.csv\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csv",metastring:'title="data/transform.csv"',title:'"data/transform.csv"'},"id,name,population\n1,germany,83\n2,france,66\n3,spain,47\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Download ",Object(o.b)("a",{parentName:"p",href:"https://raw.githubusercontent.com/frictionlessdata/frictionless-py/master/data/transform-groups.csv"},Object(o.b)("inlineCode",{parentName:"a"},"transform-groups.csv"))," into the ",Object(o.b)("inlineCode",{parentName:"p"},"data")," folder to reproduce the examples.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"cat data/transform-groups.csv\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csv",metastring:'title="data/transform-groups.csv"',title:'"data/transform-groups.csv"'},"id,name,population,year\n1,germany,83,2020\n2,germany,77,1920\n3,france,66,2020\n4,france,54,1920\n5,spain,47,2020\n6,spain,33,1920\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Download ",Object(o.b)("a",{parentName:"p",href:"https://raw.githubusercontent.com/frictionlessdata/frictionless-py/master/data/transform-pivot.csv"},Object(o.b)("inlineCode",{parentName:"a"},"transform-pivot.csv"))," into the ",Object(o.b)("inlineCode",{parentName:"p"},"data")," folder to reproduce the examples.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"cat data/transform-pivot.csv\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csv",metastring:'title="data/transform-pivot.csv"',title:'"data/transform-pivot.csv"'},"region,gender,style,units\neast,boy,tee,12\neast,boy,golf,14\neast,boy,fancy,7\neast,girl,tee,3\neast,girl,golf,8\neast,girl,fancy,18\nwest,boy,tee,12\nwest,boy,golf,15\nwest,boy,fancy,8\nwest,girl,tee,6\nwest,girl,golf,16\nwest,girl,fancy,1\n")),Object(o.b)("h2",{id:"resource-steps"},"Resource Steps"),Object(o.b)("p",null,"The Resource steps are only available for a package transformation. This includes some basic resource management operations like adding or removing resources along with the hierarchical ",Object(o.b)("inlineCode",{parentName:"p"},"transform_resource")," step."),Object(o.b)("h3",{id:"add-resource"},"Add Resource"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"data/transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_add(name='extra', path='data/transform.csv'),\n    ],\n)\npprint(target.resource_names)\npprint(target.get_resource('extra').schema)\npprint(target.get_resource('extra').read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"['main', 'extra']\n{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"remove-resource"},"Remove Resource"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"data/transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_remove(name='main'),\n    ],\n)\npprint(target)\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'profile': 'data-package', 'resources': []}\n")),Object(o.b)("h3",{id:"transform-resource"},"Transform Resource"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"data/transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_add(name='extra', path='data/transform.csv'),\n        steps.resource_transform(name='main', steps=[\n            steps.table_merge(resource='extra'),\n            steps.row_sort(field_names=['id'])\n        ]),\n        steps.resource_remove(name=\"extra\"),\n    ],\n)\npprint(target.resource_names)\npprint(target.get_resource('main').schema)\npprint(target.get_resource('main').read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"['main']\n{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"update-resource"},"Update Resource"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"data/transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_update(name='main', title='Main Resource', description='For the docs'),\n    ],\n)\npprint(target.get_resource('main'))\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'compression': 'no',\n 'compressionPath': '',\n 'control': {'newline': ''},\n 'description': 'For the docs',\n 'dialect': {},\n 'encoding': 'utf-8',\n 'format': 'csv',\n 'hashing': 'md5',\n 'name': 'main',\n 'path': 'data/transform.csv',\n 'profile': 'tabular-data-resource',\n 'query': {},\n 'schema': {'fields': [{'name': 'id', 'type': 'integer'},\n                       {'name': 'name', 'type': 'string'},\n                       {'name': 'population', 'type': 'integer'}]},\n 'scheme': 'file',\n 'title': 'Main Resource'}\n")),Object(o.b)("h2",{id:"table-steps"},"Table Steps"),Object(o.b)("p",null,"These steps are meant to be used on a table level of a resource. This includes various different operations from simple validation or writing to the disc to complex re-shaping like pivoting or melting."),Object(o.b)("h3",{id:"aggregate-table"},"Aggregate Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform-groups.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_aggregate(\n            group_name="name", aggregation={"sum": ("population", sum)}\n        ),\n    ],\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'}, {'name': 'sum'}]}\n[Row([('name', 'france'), ('sum', 120)]),\n Row([('name', 'germany'), ('sum', 160)]),\n Row([('name', 'spain'), ('sum', 80)])]\n")),Object(o.b)("h3",{id:"attach-tables"},"Attach Tables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n      steps.table_attach(resource=Resource(data=[["note"], ["large"], ["mid"]])),\n    ],\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83), ('note', 'large')]),\n Row([('id', 2), ('name', 'france'), ('population', 66), ('note', 'mid')]),\n Row([('id', 3), ('name', 'spain'), ('population', 47), ('note', None)])]\n")),Object(o.b)("h3",{id:"debug-table"},"Debug Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n      steps.table_debug(function=print),\n    ],\n)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"['1', 'germany', '83']\n['2', 'france', '66']\n['3', 'spain', '47']\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"diff-tables"},"Diff Tables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_diff(\n            resource=Resource(\n                data=[\n                    ["id", "name", "population"],\n                    [1, "germany", 83],\n                    [2, "france", 50],\n                    [3, "spain", 47],\n                ]\n            )\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 2), ('name', 'france'), ('population', 66)])]\n")),Object(o.b)("h3",{id:"intersect-tables"},"Intersect Tables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_intersect(\n            resource=Resource(\n                data=[\n                    ["id", "name", "population"],\n                    [1, "germany", 83],\n                    [2, "france", 50],\n                    [3, "spain", 47],\n                ]\n            ),\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"join-tables"},"Join Tables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_join(\n            resource=Resource(data=[["id", "note"], [1, "beer"], [2, "vine"]]),\n            field_name="id",\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83), ('note', 'beer')]),\n Row([('id', 2), ('name', 'france'), ('population', 66), ('note', 'vine')])]\n")),Object(o.b)("h3",{id:"melt-table"},"Melt Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_melt(field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'variable'},\n            {'name': 'value'}]}\n[Row([('name', 'germany'), ('variable', 'id'), ('value', 1)]),\n Row([('name', 'germany'), ('variable', 'population'), ('value', 83)]),\n Row([('name', 'france'), ('variable', 'id'), ('value', 2)]),\n Row([('name', 'france'), ('variable', 'population'), ('value', 66)]),\n Row([('name', 'spain'), ('variable', 'id'), ('value', 3)]),\n Row([('name', 'spain'), ('variable', 'population'), ('value', 47)])]\n")),Object(o.b)("h3",{id:"merge-tables"},"Merge Tables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_merge(\n            resource=Resource(data=[["id", "name", "note"], [4, "malta", "island"]])\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83), ('note', None)]),\n Row([('id', 2), ('name', 'france'), ('population', 66), ('note', None)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47), ('note', None)]),\n Row([('id', 4), ('name', 'malta'), ('population', None), ('note', 'island')])]\n")),Object(o.b)("h3",{id:"pivot-table"},"Pivot Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform-pivot.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_pivot(f1="region", f2="gender", f3="units", aggfun=sum),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'region', 'type': 'string'},\n            {'name': 'boy', 'type': 'integer'},\n            {'name': 'girl', 'type': 'integer'}]}\n[Row([('region', 'east'), ('boy', 33), ('girl', 29)]),\n Row([('region', 'west'), ('boy', 35), ('girl', 23)])]\n")),Object(o.b)("h3",{id:"print-table"},"Print Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_print(),\n    ]\n)\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"==  =======  ==========\nid  name     population\n==  =======  ==========\n 1  germany          83\n 2  france           66\n 3  spain            47\n==  =======  ==========\n")),Object(o.b)("h3",{id:"recast-table"},"Recast Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_melt(field_name="id"),\n        steps.table_recast(field_name="id"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"transpose-table"},"Transpose Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_transpose(),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'germany', 'type': 'integer'},\n            {'name': 'france', 'type': 'integer'},\n            {'name': 'spain', 'type': 'integer'}]}\n[Row([('name', 'population'), ('germany', 83), ('france', 66), ('spain', 47)])]\n")),Object(o.b)("h3",{id:"validate-table"},"Validate Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_set(field_name="population", value="bad"),\n        steps.table_validate(),\n    ]\n)\npprint(target.schema)\ntry:\n  pprint(target.read_rows())\nexcept Exception as exception:\n  pprint(exception)\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\nFrictionlessException('[step-error] The transfrom step has an error: \"table_validate\" raises \"[type-error] The cell \"bad\" in row at position \"2\" and field \"population\" at position \"3\" has incompatible type: type is \"integer/default\"\"')\n")),Object(o.b)("h3",{id:"write-table"},"Write Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path=\"data/transform.csv\")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_write(path='tmp/transform.json'),\n    ]\n)\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"cat tmp/transform.json\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json",metastring:'title="tmp/transform.json"',title:'"tmp/transform.json"'},'[\n  [\n    "id",\n    "name",\n    "population"\n  ],\n  [\n    1,\n    "germany",\n    83\n  ],\n  [\n    2,\n    "france",\n    66\n  ],\n  [\n    3,\n    "spain",\n    47\n  ]\n]\n')),Object(o.b)("h2",{id:"field-steps"},"Field Steps"),Object(o.b)("p",null,"The Field steps are responsible for managing a Table Schema's fields. You can add or remove them along with more complex operations like unpacking."),Object(o.b)("h3",{id:"add-field"},"Add Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_add(name="note", type="string", value="eu"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83), ('note', 'eu')]),\n Row([('id', 2), ('name', 'france'), ('population', 66), ('note', 'eu')]),\n Row([('id', 3), ('name', 'spain'), ('population', 47), ('note', 'eu')])]\n")),Object(o.b)("h3",{id:"filter-fields"},"Filter Fields"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_filter(names=["id", "name"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'}]}\n[Row([('id', 1), ('name', 'germany')]),\n Row([('id', 2), ('name', 'france')]),\n Row([('id', 3), ('name', 'spain')])]\n")),Object(o.b)("h3",{id:"move-field"},"Move Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_move(name="id", position=3),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'id', 'type': 'integer'}]}\n[Row([('name', 'germany'), ('population', 83), ('id', 1)]),\n Row([('name', 'france'), ('population', 66), ('id', 2)]),\n Row([('name', 'spain'), ('population', 47), ('id', 3)])]\n")),Object(o.b)("h3",{id:"remove-field"},"Remove Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_remove(names=["id"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('name', 'germany'), ('population', 83)]),\n Row([('name', 'france'), ('population', 66)]),\n Row([('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"split-field"},"Split Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_split(name="name", to_names=["name1", "name2"], pattern="a"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'name1', 'type': 'string'},\n            {'name': 'name2', 'type': 'string'}]}\n[Row([('id', 1), ('population', 83), ('name1', 'germ'), ('name2', 'ny')]),\n Row([('id', 2), ('population', 66), ('name1', 'fr'), ('name2', 'nce')]),\n Row([('id', 3), ('population', 47), ('name1', 'sp'), ('name2', 'in')])]\n")),Object(o.b)("h3",{id:"unpack-field"},"Unpack Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_update(name="id", type="array", value=[1, 1]),\n        steps.field_unpack(name="id", to_names=["id2", "id3"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'id2'},\n            {'name': 'id3'}]}\n[Row([('name', 'germany'), ('population', 83), ('id2', 1), ('id3', 1)]),\n Row([('name', 'france'), ('population', 66), ('id2', 1), ('id3', 1)]),\n Row([('name', 'spain'), ('population', 47), ('id2', 1), ('id3', 1)])]\n")),Object(o.b)("h3",{id:"update-field"},"Update Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_update(name="id", type="string", value=str),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'string'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', '1'), ('name', 'germany'), ('population', 83)]),\n Row([('id', '2'), ('name', 'france'), ('population', 66)]),\n Row([('id', '3'), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h2",{id:"row-steps"},"Row Steps"),Object(o.b)("p",null,"These steps are row-based including row filtering, slicing, and many more."),Object(o.b)("h3",{id:"filter-rows"},"Filter Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.row_filter(predicat="<formula>id > 1"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"search-rows"},"Search Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_search(regex=r"^f.*"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 2), ('name', 'france'), ('population', 66)])]\n")),Object(o.b)("h3",{id:"slice-rows"},"Slice Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_slice(head=2),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)])]\n")),Object(o.b)("h3",{id:"sort-rows"},"Sort Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_sort(field_names=["name"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"split-rows"},"Split Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_split(field_name="name", pattern="a"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germ'), ('population', 83)]),\n Row([('id', 1), ('name', 'ny'), ('population', 83)]),\n Row([('id', 2), ('name', 'fr'), ('population', 66)]),\n Row([('id', 2), ('name', 'nce'), ('population', 66)]),\n Row([('id', 3), ('name', 'sp'), ('population', 47)]),\n Row([('id', 3), ('name', 'in'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"subset-rows"},"Subset Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_update(name="id", value=1),\n        steps.row_subset(subset="conflicts", field_name="id"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 1), ('name', 'france'), ('population', 66)]),\n Row([('id', 1), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"ungroup-rows"},"Ungroup Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform-groups.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_ungroup(group_name="name", selection="first"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'year', 'type': 'integer'}]}\n[Row([('id', 3), ('name', 'france'), ('population', 66), ('year', 2020)]),\n Row([('id', 1), ('name', 'germany'), ('population', 83), ('year', 2020)]),\n Row([('id', 5), ('name', 'spain'), ('population', 47), ('year', 2020)])]\n")),Object(o.b)("h2",{id:"cell-steps"},"Cell Steps"),Object(o.b)("p",null,"The Cell steps are responsible for cell operations like converting, replacing, or formating, along with others."),Object(o.b)("h3",{id:"convert-cells"},"Convert Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_convert(value="n/a", field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'n/a'), ('population', 83)]),\n Row([('id', 2), ('name', 'n/a'), ('population', 66)]),\n Row([('id', 3), ('name', 'n/a'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"fill-cells"},"Fill Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_replace(pattern="france", replace=None),\n        steps.cell_fill(field_name="name", value="FRANCE"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'FRANCE'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"format-cells"},"Format Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_format(template="Prefix: {0}", field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'Prefix: germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'Prefix: france'), ('population', 66)]),\n Row([('id', 3), ('name', 'Prefix: spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"interpolate-cells"},"Interpolate Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_interpolate(template="Prefix: %s", field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'Prefix: germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'Prefix: france'), ('population', 66)]),\n Row([('id', 3), ('name', 'Prefix: spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"replace-cells"},"Replace Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_replace(pattern="france", replace="FRANCE"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'FRANCE'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"set-cells"},"Set Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n          steps.cell_set(field_name="population", value=100),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 100)]),\n Row([('id', 2), ('name', 'france'), ('population', 100)]),\n Row([('id', 3), ('name', 'spain'), ('population', 100)])]\n")))}c.isMDXComponent=!0},159:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),c=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},m=function(e){var n=c(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,b=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return t?r.a.createElement(b,p(p({ref:n},l),{},{components:t})):r.a.createElement(b,p({ref:n},l))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var l=2;l<o;l++)s[l]=t[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);